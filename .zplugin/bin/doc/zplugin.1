.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "README" "" "May 2017" "" ""
Zplugin gives \fBreports\fR from plugin load\. Plugins are no longer black boxes, report will tell what aliases, functions, bindkeys, Zle widgets, zstyles, completions, variables, \fBPATH\fR and \fBFPATH\fR elements a plugin has set up\. Supported is \fBunloading\fR of plugin and ability to list, uninstall, reinstall and selectively disable, enable plugin\'s completions\. Also, every plugin is compiled and user can control this function\. The system does not use \fB$FPATH\fR, it\'s kept clean!
.
.P
Code is immune to \fBKSH_ARRAYS\fR, \fBemulate sh\fR, \fBemulate ksh\fR, thoroughly tested to support any user setup, be as transparent as plain \fBsource\fR command\. Completion management functionality is provided to allow user call \fBcompinit\fR only once in \fB\.zshrc\fR\.To install, execute:
.
.IP "" 4
.
.nf

sh \-c "$(curl \-fsSL https://raw\.githubusercontent\.com/psprint/zplugin/master/doc/install\.sh)"
.
.fi
.
.IP "" 0
.
.P
Then add to \fB~/\.zshrc\fR, at bottom:
.
.IP "" 4
.
.nf

zplugin load psprint zsh\-navigation\-tools
zplugin ice from"notabug" atload"echo loaded zui" if"(( 1 ))"
zplugin load zdharma/zui
zplugin load zsh\-users/zsh\-autosuggestions
zplugin light zsh\-users/zsh\-syntax\-highlighting
.
.fi
.
.IP "" 0
.
.P
(No need to add:
.
.IP "" 4
.
.nf

source "$HOME/\.zplugin/bin/zplugin\.zsh"
.
.fi
.
.IP "" 0
.
.P
because the install script does this\.)
.
.P
\fBZNT\fR – multi\-word searching of history (Ctrl\-R), \fBzui\fR – textual UI library for Zshell\. The \fBice\fR subcommand – modifiers for following single command\. \fBnotabug\fR – the site \fBnotabug\.org\fR
.
.IP "\(bu" 4
.SH "News"
.
.IP "" 0
.
23\-05\-2017
.
.IP "\(bu" 4
New \fBice\fR modifier: \fBif\fR, to which you can provide a conditional expression
.
.IP "" 4
.
.nf

% zplg ice if"(( 0 ))"
% zplg snippet \-\-command https://github\.com/b4b4r07/httpstat/blob/master/httpstat\.sh
% zplg ice if"(( 1 ))"
% zplg snippet \-\-command https://github\.com/b4b4r07/httpstat/blob/master/httpstat\.sh
Setting up snippet httpstat\.sh
Downloading httpstat\.sh\.\.\.
.
.fi
.
.IP "" 0

.
.IP "" 0

.
.IP "\(bu" 4
16\-05\-2017
.
.IP "\(bu" 4
A very slick feature: \fBadding ice to commands\fR\. Ice is something added and something that melts\. You add modifiers to single next command, and the format (using quotes) guarantees you will see the syntax highlighted in editors:
.
.IP "" 4
.
.nf

% zplg ice from"notabug" atload"echo \-\-Loaded\-\-" atclone"echo \-\-Cloned\-\-"
% zplg load zdharma/zui
Downloading zdharma/zui\.\.\.
\.\.\.
Checking connectivity\.\.\. done\.
\-\-Cloned\-\-
Compiling zui\.plugin\.zsh\.\.\.
\-\-Loaded\-\-
% grep notabug ~/\.zplugin/plugins/zdharma\-\-\-zui/\.git/config
    url = https://notabug\.org/zdharma/zui
.
.fi
.
.IP "" 0
.
.IP
One other \fBice\fR is \fBproto\fR\. Use \fBproto"git"\fR with Github to be able to use private repositories\.
.
.IP "\(bu" 4
Completion\-management supports completions provided in subdirectory, like in \fBzsh\-users/zsh\-completions\fR plugin\. With \fBice\fR modifier \fBblockf\fR (block\-fpath), you can manage such completions:
.
.IP "" 4
.
.nf

% zplg ice blockf
% zplg load zsh\-users/zsh\-completions
\.\.\.
Symlinking completion `_ack\' to /Users/sgniazdowski/\.zplugin/completions
Forgetting completion `_ack\'\.\.\.

Symlinking completion `_afew\' to /Users/sgniazdowski/\.zplugin/completions
Forgetting completion `_afew\'\.\.\.
\.\.\.
Compiling zsh\-completions\.plugin\.zsh\.\.\.
% echo $fpath
/Users/sgniazdowski/\.zplugin/completions /usr/local/share/zsh/site\-functions
% zplg cdisable vagrant
Disabled vagrant completion belonging to zsh\-users/zsh\-completions
Forgetting completion `_vagrant\'\.\.\.

Initializing completion system (compinit)\.\.\.
.
.fi
.
.IP "" 0

.
.IP "" 0

.
.IP "\(bu" 4
14\-05\-2017
.
.IP "\(bu" 4
The \fBall\fR\-variants of commands (e\.g\. \fBupdate\-all\fR) have been merged into normal variants (with \fB\-\-all\fR switch)
.
.IP "" 0

.
.IP "\(bu" 4
13\-05\-2017
.
.IP "\(bu" 4
Bug fixes related to local plugins
.
.IP "\(bu" 4
\fB100\fR \fBms\fR gain in performance
.
.IP "\(bu" 4
When updating plugin a list of new commits is shown
.
.IP "\(bu" 4
\fBlftp\fR as fallback transport support for snippets
.
.IP "\(bu" 4
Snippets support \fBftp\fR and \fBscp\fR protocols
.
.IP "\(bu" 4
With snippets you can load a file as \fBcommand\fR that is added to PATH:
.
.IP "" 4
.
.nf

% zplg snippet \-\-command https://github\.com/b4b4r07/httpstat/blob/master/httpstat\.sh
% httpstat\.sh
too few arguments
.
.fi
.
.IP "" 0

.
.IP "\(bu" 4
Snippets are updated on \fBupdate \-\-all\fR command
.
.IP "" 0
.
.SH "Introduction"
.
.P
\fBExample use:\fR
.
.IP "" 4
.
.nf

% \. ~/github/zplugin/zplugin\.zsh
% zplugin light zsh\-users/zsh\-syntax\-highlighting
% zplugin load psprint/zsh\-cmd\-architect
.
.fi
.
.IP "" 0
.
.P
\fBExample plugin report:\fR
.
.IP "" 4
.
.nf

% zpl report psprint/zsh\-cmd\-architect
Plugin report for psprint/zsh\-cmd\-architect
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
Source zsh\-cmd\-architect\.plugin\.zsh
Autoload h\-list
Autoload h\-list\-input
Autoload h\-list\-draw
Autoload zca
Autoload zca\-usetty\-wrapper
Autoload zca\-widget
Zle \-N zca\-widget
Bindkey ^T zca\-widget

Functions created:
h\-list             h\-list\-draw
h\-list\-input       zca
zca\-usetty\-wrapper zca\-widget

Options changed:
autolist     was unset
menucomplete was unset

PATH elements added:
/Users/sgniazdowski/github/zsh\-cmd\-architect/bin

FPATH elements added:
/Users/sgniazdowski/github/zsh\-cmd\-architect

Completions:
_xauth [disabled]
.
.fi
.
.IP "" 0
.
.P
.
.P
\fBExample plugin unload:\fR
.
.IP "" 4
.
.nf

% zpl unload psprint/zsh\-cmd\-architect
Deleting function h\-list
Deleting function h\-list\-draw
Deleting function h\-list\-input
Deleting function zca
Deleting function zca\-usetty\-wrapper
Deleting function zca\-widget
Deleting bindkey ^T zca\-widget
Setting option autolist
Setting option menucomplete
Removing PATH element /Users/sgniazdowski/github/zsh\-cmd\-architect/bin
Removing FPATH element /Users/sgniazdowski/github/zsh\-cmd\-architect
Unregistering plugin psprint/zsh\-cmd\-architect
Plugin\'s report saved to $LASTREPORT
.
.fi
.
.IP "" 0
.
.P
.
.P
\fBExample \fBcsearch\fR invocation (completion management):\fR
.
.IP "" 4
.
.nf

# zplg csearch
[+] is installed, [\-] uninstalled, [+\-] partially installed
[+] _local/zplugin                  _zplugin
[\-] benclark/parallels\-zsh\-plugin   _parallels
[+] mollifier/cd\-gitroot            _cd\-gitroot
[\-] or17191/going_places            _favrm, _go
[\-] psprint/zsh\-cmd\-architect       _xauth
[\-] psprint/zsh\-editing\-workbench   _cp
[+] tevren/gitfast\-zsh\-plugin       _git
.
.fi
.
.IP "" 0
.
.P
.
.P
\fBExample \fBcompile\fR invocation:\fR
.
.IP "" 4
.
.nf

# zplg compile zsh\-users/zsh\-syntax\-highlighting
Compiling zsh\-syntax\-highlighting\.plugin\.zsh\.\.\.
# zplg compiled
zsh\-users/zsh\-syntax\-highlighting:
zsh\-syntax\-highlighting\.plugin\.zsh\.zwc
# zplg uncompile zsh\-users/zsh\-syntax\-highlighting
Removing zsh\-syntax\-highlighting\.plugin\.zsh\.zwc
# zplg compiled
No compiled plugins
# zplg compile\-all
zsh\-users/zsh\-syntax\-highlighting
Compiling zsh\-syntax\-highlighting\.plugin\.zsh\.\.\.
.
.fi
.
.IP "" 0
.
.P
.
.P
\fBExample \fBcreate\fR invocation:\fR
.
.IP "" 4
.
.nf

% zplg create psprint/testplugin
Github user name or just "_local": psprint
Plugin name: testplugin2
Plugin is psprint/testplugin2
Creating Github repository
Enter host password for user \'psprint\':
Cloning into \'psprint\-\-\-testplugin2\'\.\.\.
warning: You appear to have cloned an empty repository\.
Checking connectivity\.\.\. done\.
Remote repository psprint/testplugin2 set up as origin
You\'re in plugin\'s local folder
The files aren\'t added to git
Your next step after commiting will be:
git push \-u origin master
% ls
\.git                   README\.md
LICENSE                testplugin2\.plugin\.zsh
.
.fi
.
.IP "" 0
.
.P
.
.SH "Installation"
Execute:
.
.IP "" 4
.
.nf

sh \-c "$(curl \-fsSL https://raw\.githubusercontent\.com/psprint/zplugin/master/doc/install\.sh)"
.
.fi
.
.IP "" 0
.
.P
To update run the command again (or just execute \fBdoc/install\.sh\fR) or run \fBzplugin self\-update\fR\.
.
.P
\fBZplugin\fR will be installed into \fB~/\.zplugin/bin\fR\. \fB\.zshrc\fR will be updated with three lines of code that will be added to the bottom (the lines will be sourcing \fBzplugin\.zsh\fR and setting up completion)\.
.
.P
Completion will be available, for command \fBzplugin\fR and aliases \fBzpl\fR, \fBzplg\fR\.
.
.P
After installing and reloading shell give \fBZplugin\fR a quick try with \fBzplugin help\fR\.
.
.SH "Manual installation"
To manually install \fBZplugin\fR clone the repo to e\.g\. \fB~/\.zplugin/bin\fR:
.
.IP "" 4
.
.nf

mkdir ~/\.zplugin
git clone https://github\.com/psprint/zplugin\.git ~/\.zplugin/bin
.
.fi
.
.IP "" 0
.
.P
and source it from \fB\.zshrc\fR (\fBabove compinit\fR):
.
.IP "" 4
.
.nf

source ~/\.zplugin/bin/zplugin\.zsh
.
.fi
.
.IP "" 0
.
.P
If you place the \fBsource\fR below \fBcompinit\fR, then add those two lines after the \fBsource\fR: \fBsh autoload \-Uz _zplugin (( ${+_comps} )) && _comps[zplugin]=_zplugin\fR
.
.P
After installing and reloading shell give \fBZplugin\fR a quick try with \fBzplugin help\fR\.
.
.SS "Compilation"
It\'s good to compile \fBzplugin\fR into \fBZsh\fR bytecode:
.
.IP "" 4
.
.nf

zcompile ~/\.zplugin/bin/zplugin\.zsh
.
.fi
.
.IP "" 0
.
.P
Zplugin will compile each newly downloaded plugin\. You can clear compilation of a plugin by invoking \fBzplugin uncompile {plugin\-spec}\fR\. There are also commands \fBcompile\fR, \fBcompiled\fR that control the functionality of compiling plugins\.
.
.SH "Usage"
.
.nf

% zpl help
Usage:
\-h|\-\-help|help           \- usage information
man                      \- manual
self\-update              \- updates Zplugin
load {plugin\-name}       \- load plugin
light {plugin\-name}      \- light plugin load, without reporting
unload {plugin\-name}     \- unload plugin
snippet [\-f] [\-\-command] {url} \- source (or add to PATH with \-\-command) local or remote file (\-f: force \- don\'t use cache)
update {plugin\-name}     \- Git update plugin (or all plugins and snippets if \-\-all passed)
status {plugin\-name}     \- Git status for plugin (or all plugins if \-\-all passed)
report {plugin\-name}     \- show plugin\'s report (or all plugins\' if \-\-all passed)
loaded|list [keyword]    \- show what plugins are loaded (filter with `keyword\')
cd {plugin\-name}         \- cd into plugin\'s directory
create {plugin\-name}     \- create plugin (also together with Github repository)
edit {plugin\-name}       \- edit plugin\'s file with $EDITOR
glance {plugin\-name}     \- look at plugin\'s source (pygmentize, {,source\-}highlight)
stress {plugin\-name}     \- test plugin for compatibility with set of options
changes {plugin\-name}    \- view plugin\'s git log
recently [time\-spec]     \- show plugins that changed recently, argument is e\.g\. 1 month 2 days
clist|completions        \- list completions in use
cdisable {cname}         \- disable completion `cname\'
cenable  {cname}         \- enable completion `cname\'
creinstall {plugin\-name} \- install completions for plugin
cuninstall {plugin\-name} \- uninstall completions for plugin
csearch                  \- search for available completions from any plugin
compinit                 \- refresh installed completions
dtrace|dstart            \- start tracking what\'s going on in session
dstop                    \- stop tracking what\'s going on in session
dunload                  \- revert changes recorded between dstart and dstop
dreport                  \- report what was going on in session
dclear                   \- clear report of what was going on in session
compile  {plugin\-name}   \- compile plugin (or all plugins if \-\-all passed)
uncompile {plugin\-name}  \- remove compiled version of plugin (or of all plugins if \-\-all passed)
compiled                 \- list plugins that are compiled
.
.fi
.
.P
To use themes created for \fBOh\-My\-Zsh\fR you might want to first source the \fBgit\fR library there:
.
.IP "" 4
.
.nf

zplugin snippet \'http://github\.com/robbyrussell/oh\-my\-zsh/raw/master/lib/git\.zsh\'
.
.fi
.
.IP "" 0
.
.P
Then you can use the themes as snippets (\fBzplugin snippet {file path or Github URL}\fR)\. Some themes require not only \fBOh\-My\-Zsh\'s\fR \fBgit\fR library, but also \fBgit\fR plugin (error about function \fBcurrent_branch\fR appears)\. Source it as snippet directly from \fBOh\-My\-Zsh\fR:
.
.IP "" 4
.
.nf

zplugin snippet \'https://github\.com/robbyrussell/oh\-my\-zsh/raw/master/plugins/git/git\.plugin\.zsh\'
.
.fi
.
.IP "" 0
.
.P
Such lines should be added to \fB\.zshrc\fR\. Snippets are cached locally, use \fB\-f\fR option to download a fresh version of a snippet\.
.
.P
Most themes require \fBpromptsubst\fR option (\fBsetopt promptsubst\fR in \fBzshrc\fR), if it isn\'t set prompt will appear as something like: \fB$(build_prompt)\fR\.
.
.P
You might want to supress completions provided by the git plugin by issuing \fBzplugin cdclear \-q\fR (\fB\-q\fR is for quiet) – see below \fBIgnoring Compdefs\fR\.
.
.P
To summarize:
.
.IP "" 4
.
.nf

zplugin snippet \'http://github\.com/robbyrussell/oh\-my\-zsh/raw/master/lib/git\.zsh\'
zplugin snippet \'https://github\.com/robbyrussell/oh\-my\-zsh/raw/master/plugins/git/git\.plugin\.zsh\'
zplugin cdclear \-q # <\- forget completions provided up to this moment
setopt promptsubst
# Load theme
zplugin snippet \'https://github\.com/robbyrussell/oh\-my\-zsh/blob/master/themes/dstufft\.zsh\-theme\'
# Load plugin\-theme depending on OMZ git library
zplugin light NicoSantangelo/Alpharized
.
.fi
.
.IP "" 0
.
.SH "Calling compinit"
Compinit should be called after loading of all plugins and before possibly calling \fBcdreply\fR\. \fBZplugin\fR takes control over completions, symlinks them to \fB~/\.zplugin/completions\fR and adds this directory to \fB$FPATH\fR\. You manage those completions via commands starting with \fBc\fR: \fBcsearch\fR, \fBclist\fR, \fBcreinstall\fR, \fBcuninstall\fR, \fBcenable\fR, \fBcdisable\fR\. All this brings order to \fB$FPATH\fR, there is only one directory there\. Also, plugins aren\'t allowed to simply run \fBcompdefs\fR\. You can decide whether to run \fBcompdefs\fR by issuing \fBzplugin cdreplay\fR (\fBcompdef\fR\-replay)\. To summarize:
.
.IP "" 4
.
.nf

source ~/\.zplugin/bin/zplugin\.zsh

zplugin load "some/plugin"
\.\.\.
zplugin load "other/plugin"

autoload \-Uz compinit
compinit

zplugin cdreplay \-q # \-q is for quiet
.
.fi
.
.IP "" 0
.
.P
This allows to call compinit once\. Performance gains are huge, example shell startup time with double \fBcompinit\fR: \fB0\.980\fR sec, with \fBcdreplay\fR and single \fBcompinit\fR: \fB0\.156\fR sec\.
.
.SH "Ignoring Compdefs"
If you want to ignore \fBcompdef\fRs provided by some plugins or snippets, place their load commands before commands loading other plugins or snippets, and issue \fBzplugin cdclear\fR:
.
.IP "" 4
.
.nf

source ~/\.zplugin/bin/zplugin\.zsh
zplugin snippet https://github\.com/robbyrussell/oh\-my\-zsh/blob/master/plugins/git/git\.plugin\.zsh
zplugin cdclear \-q # <\- forget completions provided up to this moment

zplugin load "some/plugin"
\.\.\.
zplugin load "other/plugin"

autoload \-Uz compinit
compinit
zplugin cdreplay \-q # <\- execute compdefs provided by rest of plugins
zplugin cdlist # look at gathered compdefs
.
.fi
.
.IP "" 0
.
.SH "Non\-Github (local) plugins"
Use \fBcreate\fR command with user name \fB_local\fR (the default) to create plugin\'s skeleton\. It will be not connected with Github repository (because of user name being \fB_local\fR)\. To enter the plugin\'s directory use \fBcd\fR command with just plugin\'s name (without \fB_local\fR)\.
.
.P
The special user name \fB_local\fR is optional also for other commands, e\.g\. for \fBload\fR (i\.e\. \fBzplugin load myplugin\fR is sufficient, there\'s no need for \fBzplugin load _local/myplugin\fR)\.
.
.SH "IRC channel"
Simply connect to chat\.freenode\.net:6697 \fIircs://chat\.freenode\.net:6697/%23zplugin\fR (SSL) or chat\.freenode\.net:6667 \fIirc://chat\.freenode\.net:6667/%23zplugin\fR and join #zplugin\.
.
.P
Following is a quick access via Webchat  \fIhttps://kiwiirc\.com/client/chat\.freenode\.net:+6697/#zplugin\fR
